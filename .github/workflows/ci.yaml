name: CI

on:
  push:
    branches:
      - 'main'
  pull_request:

permissions:
  checks: write
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23
    - name: Install Task
      uses: arduino/setup-task@v2
    - name: Set up Docker
      uses: crazy-max/ghaction-setup-docker@v3
    - name: Install k3d
      run: curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
    - name: Install argocd
      run: |
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64
    - name: Install all dependencies
      run: task go:install-ci
    - name: Lint code.
      run: task go:lint
    - name: Start ArgoCD
      run: task services
    - name: Run tests.
      run: task go:test-ci
    - name: Compile code
      run: task go:build
    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: report.xml
    - name: Generate lcov coverage report.
      uses: jandelgado/gcov2lcov-action@v1.1.1
    - name: Upload results to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Save artifacts.
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: Coverage report.
        path: ./coverage.html

  format:
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23.x
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Generate format report.
      run: gofmt -d .
    - name: Run format again (so job will error if format issues found).
      run: test -z $(gofmt -l .)
